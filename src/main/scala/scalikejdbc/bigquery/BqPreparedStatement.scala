package scalikejdbc.bigquery

import java.io.{InputStream, Reader}
import java.math.BigDecimal
import java.net.URL
import java.sql.{Array => SqlArray, _}
import java.util.Calendar

class BqPreparedStatement extends PreparedStatement {

  def setByte(parameterIndex: Int, x: Byte): Unit = ???

  def getParameterMetaData: ParameterMetaData = ???

  def setRef(parameterIndex: Int, x: Ref): Unit = ???

  def clearParameters(): Unit = ???

  def setBytes(parameterIndex: Int, x: Array[Byte]): Unit = ???

  def setBinaryStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

  def setBinaryStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

  def setBinaryStream(parameterIndex: Int, x: InputStream): Unit = ???

  def setAsciiStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

  def setAsciiStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

  def setAsciiStream(parameterIndex: Int, x: InputStream): Unit = ???

  def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int): Unit = ???

  def setObject(parameterIndex: Int, x: scala.Any): Unit = ???

  def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int, scaleOrLength: Int): Unit = ???

  def setDate(parameterIndex: Int, x: Date): Unit = ???

  def setDate(parameterIndex: Int, x: Date, cal: Calendar): Unit = ???

  def setTimestamp(parameterIndex: Int, x: Timestamp): Unit = ???

  def setTimestamp(parameterIndex: Int, x: Timestamp, cal: Calendar): Unit = ???

  def setUnicodeStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

  def getMetaData: ResultSetMetaData = ???

  def setBlob(parameterIndex: Int, x: Blob): Unit = ???

  def setBlob(parameterIndex: Int, inputStream: InputStream, length: Long): Unit = ???

  def setBlob(parameterIndex: Int, inputStream: InputStream): Unit = ???

  def addBatch(): Unit = ???

  def execute(): Boolean = ???

  def executeQuery(): ResultSet = ???

  def setNClob(parameterIndex: Int, value: NClob): Unit = ???

  def setNClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  def setNClob(parameterIndex: Int, reader: Reader): Unit = ???

  def setArray(parameterIndex: Int, x: SqlArray): Unit = ???

  def setNCharacterStream(parameterIndex: Int, value: Reader, length: Long): Unit = ???

  def setNCharacterStream(parameterIndex: Int, value: Reader): Unit = ???

  def setURL(parameterIndex: Int, x: URL): Unit = ???

  def setRowId(parameterIndex: Int, x: RowId): Unit = ???

  def setSQLXML(parameterIndex: Int, xmlObject: SQLXML): Unit = ???

  def setString(parameterIndex: Int, x: String): Unit = ???

  def setFloat(parameterIndex: Int, x: Float): Unit = ???

  def setNString(parameterIndex: Int, value: String): Unit = ???

  def setBoolean(parameterIndex: Int, x: Boolean): Unit = ???

  def setDouble(parameterIndex: Int, x: Double): Unit = ???

  def setBigDecimal(parameterIndex: Int, x: BigDecimal): Unit = ???

  def executeUpdate(): Int = ???

  def setTime(parameterIndex: Int, x: Time): Unit = ???

  def setTime(parameterIndex: Int, x: Time, cal: Calendar): Unit = ???

  def setShort(parameterIndex: Int, x: Short): Unit = ???

  def setLong(parameterIndex: Int, x: Long): Unit = ???

  def setCharacterStream(parameterIndex: Int, reader: Reader, length: Int): Unit = ???

  def setCharacterStream(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  def setCharacterStream(parameterIndex: Int, reader: Reader): Unit = ???

  def setClob(parameterIndex: Int, x: Clob): Unit = ???

  def setClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  def setClob(parameterIndex: Int, reader: Reader): Unit = ???

  def setNull(parameterIndex: Int, sqlType: Int): Unit = ???

  def setNull(parameterIndex: Int, sqlType: Int, typeName: String): Unit = ???

  def setInt(parameterIndex: Int, x: Int): Unit = ???

  def setMaxFieldSize(max: Int): Unit = ???

  def getMoreResults: Boolean = ???

  def getMoreResults(current: Int): Boolean = ???

  def clearWarnings(): Unit = ???

  def getGeneratedKeys: ResultSet = ???

  def closeOnCompletion(): Unit = ???

  def cancel(): Unit = ???

  def getResultSet: ResultSet = ???

  def setPoolable(poolable: Boolean): Unit = ???

  def isPoolable: Boolean = ???

  def setCursorName(name: String): Unit = ???

  def getUpdateCount: Int = ???

  def addBatch(sql: String): Unit = ???

  def getMaxRows: Int = ???

  def execute(sql: String): Boolean = ???

  def execute(sql: String, autoGeneratedKeys: Int): Boolean = ???

  def execute(sql: String, columnIndexes: Array[Int]): Boolean = ???

  def execute(sql: String, columnNames: Array[String]): Boolean = ???

  def executeQuery(sql: String): ResultSet = ???

  def getResultSetType: Int = ???

  def setMaxRows(max: Int): Unit = ???

  def getFetchSize: Int = ???

  def getResultSetHoldability: Int = ???

  def setFetchDirection(direction: Int): Unit = ???

  def getFetchDirection: Int = ???

  def getResultSetConcurrency: Int = ???

  def clearBatch(): Unit = ???

  def close(): Unit = ???

  def isClosed: Boolean = ???

  def executeUpdate(sql: String): Int = ???

  def executeUpdate(sql: String, autoGeneratedKeys: Int): Int = ???

  def executeUpdate(sql: String, columnIndexes: Array[Int]): Int = ???

  def executeUpdate(sql: String, columnNames: Array[String]): Int = ???

  def getQueryTimeout: Int = ???

  def getWarnings: SQLWarning = ???

  def setFetchSize(rows: Int): Unit = ???

  def setQueryTimeout(seconds: Int): Unit = ???

  def executeBatch(): Array[Int] = ???

  def setEscapeProcessing(enable: Boolean): Unit = ???

  def getConnection: Connection = ???

  def getMaxFieldSize: Int = ???

  def isCloseOnCompletion: Boolean = ???

  def unwrap[T](iface: Class[T]): T = ???

  def isWrapperFor(iface: Class[_]): Boolean = ???
}
